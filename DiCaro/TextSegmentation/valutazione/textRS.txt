RSs are information processing systems that actively gather various kinds of data in order to build their recommendations. Data is primarily about the items to suggest and the users who will receive these recommendations. But, since the data and knowledge sources available for recommender systems can be very diverse, ultimately, whether it can be exploited or not depends on the recommendation technique. This will become clearer in the various chapters included in this handbook.
In general, there are recommendation techniques that are knowledge-poor, namely, that use very simple and basic data, such as user ratings or evaluations for items. Other techniques are much more knowledge-dependent, in that they use ontological descriptions of the users or the items ( 4), constraints ( 5), or social relations and activities of the users ( 15 and 17). In any case, as a general classification, data used by RSs refers to three kinds of objects: items, users, and transactions, that is, relations between the users and the items.
Items are the objects that are recommended. Items may be characterized by their complexity and their value or utility. The value of an item may be positive if the item is useful to the user, or negative if the item is not appropriate and the user made the wrong decision when selecting it. We note that when a user is acquiring an item, one will always incur in a cost which includes the cognitive cost of searching for the item and the real monetary cost eventually paid for the item.
For instance, the designer of a news RS must take into account the complexity of a news item, its structure, the textual representation, and the time-dependent importance of any news item. But at the same time, the RS designer must understand that even if the user is not paying for reading news, there is always a cognitive cost associated with searching and reading news items. If a selected item is relevant to the user, this cost is dominated by the benefit of having acquired useful information. Whereas if the item is not relevant, the net value of that item for the user, and its recommendation, is negative. In other domains, cars, or financial investments, the true monetary cost of the items becomes an important element to consider when selecting the most appropriate recommendation approach.
Items with low complexity and value are: news, webpages, books, CDs, and movies. Items with larger complexity and value are: digital cameras, mobile phones, PCs,  The most complex items that have been considered are insurance policies, financial investments, travel, and jobs.
RSs, according to their core technology, can use a range of properties and features of the items. For example in a movie recommender system, the genre (comedy, thriller, ), as well as the director and actors, can be used to describe a movie and to learn how the utility of an item depends on its features. Items can be represented using various information and representation approaches, in a minimalist way as a single ID code, or in a richer form, as a set of attributes, and even as a concept in an ontological representation of the domain.
Users of an RS, as mentioned above, may have very diverse goals and characteristics. In order to personalize the recommendations and the human computer interaction, RSs exploit a range of information about the users. This information can be structured in various ways, and again, the selection of what information to model depends on the recommendation technique.
For instance, in collaborative filtering, users are modeled as a simple list containing the ratings provided by the user for certain items. In a demographic RS, sociodemographic attributes such as age, gender, profession, and education, are used. User data is said to constitute the user model. The user model profiles the user,  encodes her preferences and needs. Various user modeling approaches have been used and, in a certain sense, an RS can be viewed as a tool that generates recommendations by building and exploiting user models. Since no personalization is possible without a convenient user model the user model will always play a central role. For instance, in reconsidering a collaborative filtering approach, the user is either profiled directly by its ratings of items or, using these ratings, the system derives a vector of factor values where users differ in how each factor weights in their model.
Users can also be described by their behavior pattern data, for example, site browsing patterns (in a Web-based recommender system) , or travel search patterns (in a travel recommender system) . Moreover, user data may include relations between users such as the trust level of these relations between users ( 16). An RS might utilize this information to recommend items to users that were preferred by similar or trusted users.
Transactions We generically refer to a transaction as a recorded interaction between a user and the RS. Transactions are log-like data that store important information generated during the human-computer interaction and which are useful for the recommendation generation algorithm that the system is using. For instance, a transaction log may contain a reference to the item selected by the user and a description of the context (, the user goal/query) for that particular recommendation. If available, that transaction may also include explicit feedback that the user has provided, such as the rating for the selected item.
In fact, ratings are the most popular form of transaction data that an RS collects. These ratings may be collected explicitly or implicitly. In the explicit collection of ratings, the user is asked to provide an opinion about an item on a rating scale. According to , ratings can take on a variety of forms:
Numerical ratings such as the 1–5 stars provided in the book recommender associated with Amazoncom. Ordinal ratings, such as “strongly agree, agree, neutral, disagree, strongly disagree” where the user is asked to select the term that best indicates his or her opinion regarding an item (usually via questionnaire). Binary ratings that model choices in which the user is simply asked to decide if a certain item is good or bad.
Unary ratings can indicate that a user has observed or purchased an item, or otherwise rated the item positively. In such cases, the absence of a rating indicates that we have no information relating the user to the item (perhaps the user purchased the item elsewhere).
Another form of user evaluation consists of tags associated by the user with the items that the system presents. For instance, on Movielens (http://movielensumn edu), RS tags represent how MovieLens users feel about a movie, : “too long,” or “acting".
In transactions that collect implicit ratings, the system aims to infer the user’s opinion based on the user’s actions. For example, if a user enters the keyword “Yoga” at Amazoncom, a long list of books will be provided. In return, the user may click on a certain book on the list in order to receive additional information. At this point, the system may infer that the user is somewhat interested in that book.
In conversational systems, systems that support an interactive process, the transaction model is more refined. In these systems, user requests alternate with system actions (see Chaps 10 and 18). That is, the user may request a recommendation and the system may produce a suggestion list. But it can also request additional user preferences to provide the user with better, more refined results. Here, in the transaction model, the system collects the various requestsresponses, and may eventually learn to modify its interaction strategy by observing the outcome of the recommendation process .
Collaborative Filtering The original and most simple implementation of this approach makes recommendations to the active user based on items that other users with similar tastes liked in the past.
The similarity in taste of two users is calculated based on the similarity in the rating history of the users. This is the reason why refers to collaborative filtering as “people-to-people correlation”. Collaborative filtering is considered to be the most popular and widely implemented technique in RS.
Chapter 2 presents a comprehensive survey of neighborhood-based methods for collaborative filtering. Neighborhood-based methods focus on relationships between items or, alternatively, between users. An item-item approach models the preference of a user to an item based on ratings of similar items by the same user. Neighborhood-based methods benefit from considerable popularity due to their simplicity, efficiency, and ability to produce accurate and personalized recommendations. Chapter 2 describes the main benefits of such methods, as well as their principal characteristics.
Moreover, Chap 2 addresses the essential decisions that are required while implementing a neighborhood-based recommender system, and gives practical information on how to make such decisions. Perhaps the decision that has the greatest impact on the rating prediction and computational performance of the recommender system is the choice between a user-based and an item-based method. In typical commercial recommender systems where the number of users exceeds the number of available items, item-based approaches should be preferred since they provide more accurate recommendations, while being more computationally efficient and requiring less frequent updates. On the other hand, user-based methods usually provide more original recommendations, which may lead users to a more satisfying experience.
Finally, the problems of sparsity and limited coverage, often observed in large commercial recommender systems, are discussed by exploring two research directions: dimensionality reduction and graph-based techniques. Dimensionality reduction provides a compact representation of users and items that captures their most significant features. An advantage of such an approach is that it allows for obtaining meaningful relations between pairs of users or items, even though these users have rated different items, or these items were rated by different users. On the other hand, graph-based techniques exploit the transitive relations in the data.
These techniques also avoid the problems of sparsity and limited coverage by evaluating the relationship between users or items that are not directly connected. However, unlike dimensionality reduction, graph-based methods also preserve some of the “local” relations in the data. Chapter 3 presents several recent extensions available for building CF recommenders. Specifically, the authors discuss latent factor models, such as matrix factorization (Singular Value Decomposition (SVD)). These methods transform both items and users to the same latent factor space. The latent space is then used to explain ratings by characterizing both products and users in term of factors automatically inferred from user feedback. The authors elucidate how SVD can handle additional features of the data, including implicit feedback and temporal information. They also describe techniques to address shortcomings of neighborhood techniques by suggesting more rigorous formulations using global optimization techniques. Utilizing such techniques makes it possible to lift the limit on neighborhood size and to address implicit feedback and temporal dynamics. The resulting accuracy is close to that of matrix factorization models, while offering a number of practical advantages.
Demographic This type of system recommends items based on the demographic profile of the user. The assumption is that different recommendations should be generated for different demographic niches. Many websites adopt simple and effective personalization solutions based on demographics. For example, users are dispatched to particular websites based on their language or country. Or, suggestions may be customized according to the age of the user. While these approaches have been quite popular in the marketing literature, there has been relatively little proper RS research on demographic systems.
Knowledge-based systems recommend items based on specific domain knowledge about how certain item features meet users’ needs and preferences and, ultimately, how the item is useful for the user. Notable knowledge-based recommender systems are case-based. In these systems, a similarity function estimates how much the user’s needs (problem description) match the recommendations (solutions of the problem). Here, the similarity score can be directly interpreted as the utility of the recommendation for the user. Knowledgebased systems tend to work better than others at the beginning of their deployment but if they are not equipped with learning components, they may be surpassed by other shallow methods that can exploit the logs of the human/computer interaction (as in CF).
